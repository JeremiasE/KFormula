<ctlprofile>
    <info colorModel="YCbCrA" depth="8" type="integer" name="Standard YCbCr (8-bits)" />
    <program>
<![CDATA[

import "pigmentutils";

const int MAX_CHANNEL = 255;

const float LUMA_RED = 0.2989;
const float LUMA_GREEN = 0.587;
const float LUMA_BLUE = 0.114;
const int MIDDLE_VALUE = (MAX_CHANNEL + 1) / 2;


void RGBAi8_to_YCbCri8(int bIn, int gIn, int rIn, int aIn, output int YOut, output int CbOut, output int CrOut, output int aOut)
{
    YOut = clampInt( LUMA_RED*rIn + LUMA_GREEN*gIn + LUMA_BLUE*bIn, 0, MAX_CHANNEL );
    CbOut = clampInt( (bIn - YOut)/(2-2*LUMA_BLUE) + MIDDLE_VALUE, 0, MAX_CHANNEL);
    CrOut = clampInt( (rIn - YOut)/(2-2*LUMA_RED) + MIDDLE_VALUE, 0, MAX_CHANNEL);
    aOut = aIn;
}

void YCbCri8_to_RGBAi8(int YIn, int CbIn, int CrIn, int aIn, output int bOut, output int gOut, output int rOut, output int aOut)
{
    rOut = clampInt( (CrIn - MIDDLE_VALUE) * (2-2*LUMA_RED) + YIn, 0, MAX_CHANNEL );
    bOut = clampInt( (CbIn - MIDDLE_VALUE) * (2-2*LUMA_BLUE) + YIn, 0, MAX_CHANNEL );
    gOut = clampInt( (YIn - LUMA_BLUE * bOut - LUMA_RED * rOut ) / LUMA_GREEN, 0, MAX_CHANNEL );
    aOut = aIn;
}

]]>
    </program>
    <transformations>
        <conversions>
            <conversion function="RGBAi8_to_YCbCri8">
                <input colorModel="RGBA" depth="8" type="integer" profile="sRGB built-in - (lcms internal)" />
                <output colorModel="YCbCrA" depth="8" type="integer" />
            </conversion>
            <conversion function="YCbCri8_to_RGBAi8">
                <input colorModel="YCbCrA" depth="8" type="integer" />
                <output colorModel="RGBA" depth="8" type="integer" profile="sRGB built-in - (lcms internal)" />
            </conversion>
        </conversions>
    </transformations>
</ctlprofile>