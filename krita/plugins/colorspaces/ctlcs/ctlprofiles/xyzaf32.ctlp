<ctlprofile>
    <info colorModel="XYZA" depth="32" type="float" name="Standard XYZ" />
    <program>
<![CDATA[

import "pigmentutils";

// Observer= 2Â°, Illuminant= D65
const float delta = (6.0 / 29.0);
const float X_r = (95.047 / 100.0);
const float Y_r = (100.000 / 100.0);
const float Z_r = (108.883 / 100.0);
const float k = 0.008856;


void RGBAf32_to_XYZAf32(float bIn, float gIn, float rIn, float aIn, output float xOut, output float yOut, output float zOut, output float aOut)
{
    xOut = 0.412400*rIn + 0.357579*gIn + 0.180464*bIn;
    yOut = 0.212656*rIn + 0.715158*gIn + 0.072186*bIn;
    zOut = 0.019332*rIn + 0.119193*gIn + 0.950444*bIn;
    aOut = aIn;
}

void XYZAf32_to_RGBAf32(float xIn, float yIn, float zIn, float aIn, output float bOut, output float gOut, output float rOut, output float aOut)
{
    rOut = 3.240708 * xIn - 1.537259 * yIn - 0.498570 * zIn;
    gOut = -0.969257 * xIn + 1.875995 * yIn - 0.041555 * zIn;
    bOut = 0.055636 * xIn - 0.203996 * yIn + 1.057069 * zIn;
    aOut = aIn;
}

float ab_TO_FLOAT( int v)
{
    return ((int16toFloat(v) - 0.5) * 200.0);
}

float L_TO_FLOAT( int v)
{
    return int16toFloat( v ) * 100.0;
}

float f_lab_to_xyz(float v, float r)
{
    if( v > delta)
    {
        return r * pow(v, 3.0);
    } else {
        return r * (v - 16.0 / 116.0) * 3.0 * delta *delta;
    }
    return 0.0;
}

void LABAi_to_XYZAf32(int lIn, int aIn, int bIn, int alphaIn, output float xOut, output float yOut, output float zOut, output float alphaOut)
{
    float fy = ( L_TO_FLOAT( lIn ) + 16.0) / 116.0;
    float fx = fy + ab_TO_FLOAT( aIn ) / 500.0;
    float fz = fy - ab_TO_FLOAT( bIn ) / 200.0;
    xOut = f_lab_to_xyz(fx, X_r);
    yOut = f_lab_to_xyz(fy, Y_r);
    zOut = f_lab_to_xyz(fz, Z_r);
    alphaOut = int16toFloat( alphaIn );
}

float f_xyz_to_lab(float v)
{
    if(v > k)
    {
        return pow(v, 1.0/3.0);
    } else {
        return 7.787 * v + 16.0 / 116.0;
    }
    return 0.0;
}

int FLOAT_TO_L(float v)
{
    return floatToInt16( (v) / 100.0);
}

int FLOAT_TO_ab(float v)
{
    return floatToInt16( (v)/200.0 + 0.5);
}


void XYZAf32_to_LABAi(float xIn, float yIn, float zIn, float alphaIn, output int lOut, output int aOut, output int bOut, output int alphaOut)
{
    float fx = f_xyz_to_lab( xIn / X_r );
    float fy = f_xyz_to_lab( yIn / Y_r );
    float fz = f_xyz_to_lab( zIn / Z_r );
    
    lOut = FLOAT_TO_L(116 * fy - 16);
    aOut = FLOAT_TO_ab(500 * ( fx - fy ));
    bOut = FLOAT_TO_ab(200 * ( fy - fz ));
    alphaOut = floatToInt16(alphaIn);
}


]]>
    </program>
    <transformations>
        <conversions>
            <conversion function="RGBAf32_to_XYZAf32">
                <input colorModel="RGBA" depth="32" type="float" profile="Standard Linear RGB (scRGB/sRGB64)" />
                <output colorModel="XYZA" depth="32" type="float" />
            </conversion>
            <conversion function="XYZAf32_to_RGBAf32">
                <input colorModel="XYZA" depth="32" type="float" />
                <output colorModel="RGBA" depth="32" type="float" profile="Standard Linear RGB (scRGB/sRGB64)" />
            </conversion>
            <conversion function="LABAi_to_XYZAf32">
                <input colorModel="LABA" depth="16" type="integer" profile="Lab built-in - (lcms internal)" />
                <output colorModel="XYZA" depth="32" type="float" />
            </conversion>
            <conversion function="XYZAf32_to_LABAi">
                <input colorModel="XYZA" depth="32" type="float" />
                <output colorModel="LABA" depth="16" type="integer" profile="Lab built-in - (lcms internal)" />
            </conversion>
        </conversions>
    </transformations>
</ctlprofile>
