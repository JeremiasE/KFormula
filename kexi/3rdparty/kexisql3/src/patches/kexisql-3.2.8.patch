diff -u ../../sqlite-3.2.8.orig/alter.c ./alter.c
--- ../../sqlite-3.2.8.orig/alter.c	2005-12-19 10:37:50.000000000 +0100
+++ ./alter.c	2008-01-14 14:40:16.546875000 +0100
@@ -12,7 +12,6 @@
 ** This file contains C code routines that used to generate VDBE code
 ** that implements the ALTER TABLE command.
 **
-** $Id: alter.c,v 1.8 2005/08/19 19:14:13 drh Exp $
 */
 #include "sqliteInt.h"
 #include <ctype.h>
diff -u ../../sqlite-3.2.8.orig/analyze.c ./analyze.c
--- ../../sqlite-3.2.8.orig/analyze.c	2005-12-19 10:37:50.000000000 +0100
+++ ./analyze.c	2008-01-14 14:40:16.687500000 +0100
@@ -11,7 +11,6 @@
 *************************************************************************
 ** This file contains code associated with the ANALYZE command.
 **
-** @(#) $Id: analyze.c,v 1.9 2005/09/20 17:42:23 drh Exp $
 */
 #ifndef SQLITE_OMIT_ANALYZE
 #include "sqliteInt.h"
diff -u ../../sqlite-3.2.8.orig/attach.c ./attach.c
--- ../../sqlite-3.2.8.orig/attach.c	2005-12-19 10:37:50.000000000 +0100
+++ ./attach.c	2008-01-14 14:40:16.812500000 +0100
@@ -11,7 +11,6 @@
 *************************************************************************
 ** This file contains code used to implement the ATTACH and DETACH commands.
 **
-** $Id: attach.c,v 1.34 2005/08/20 03:03:04 drh Exp $
 */
 #include "sqliteInt.h"
 
@@ -101,7 +100,7 @@
   aNew->zName = zName;
   zName = 0;
   aNew->safety_level = 3;
-  rc = sqlite3BtreeFactory(db, zFile, 0, MAX_PAGES, &aNew->pBt);
+  rc = sqlite3BtreeFactory(db, zFile, 0, MAX_PAGES, &aNew->pBt, 0 /*!exclusive*/, 1/*allowReadonly*/);
   if( rc ){
     sqlite3ErrorMsg(pParse, "unable to open database: %s", zFile);
   }
diff -u ../../sqlite-3.2.8.orig/auth.c ./auth.c
--- ../../sqlite-3.2.8.orig/auth.c	2005-12-19 10:37:50.000000000 +0100
+++ ./auth.c	2008-01-14 14:40:17.031250000 +0100
@@ -14,7 +14,6 @@
 ** systems that do not need this facility may omit it by recompiling
 ** the library with -DSQLITE_OMIT_AUTHORIZATION=1
 **
-** $Id: auth.c,v 1.22 2005/07/29 15:36:15 drh Exp $
 */
 #include "sqliteInt.h"
 
diff -u ../../sqlite-3.2.8.orig/btree.c ./btree.c
--- ../../sqlite-3.2.8.orig/btree.c	2005-12-19 10:37:50.000000000 +0100
+++ ./btree.c	2008-01-14 14:40:20.109375000 +0100
@@ -9,7 +9,6 @@
 **    May you share freely, never taking more than you give.
 **
 *************************************************************************
-** $Id: btree.c,v 1.269 2005/09/17 15:20:27 drh Exp $
 **
 ** This file implements a external (disk-based) database using BTrees.
 ** For a detailed discussion of BTrees, refer to
@@ -1213,7 +1212,9 @@
 int sqlite3BtreeOpen(
   const char *zFilename,  /* Name of the file containing the BTree database */
   Btree **ppBtree,        /* Pointer to new Btree object written here */
-  int flags               /* Options */
+  int flags,              /* Options */
+  int exclusiveFlag,      /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly       /* as in sqlite3OsOpenReadWrite() */
 ){
   Btree *pBt;
   int rc;
@@ -1236,7 +1237,8 @@
     *ppBtree = 0;
     return SQLITE_NOMEM;
   }
-  rc = sqlite3pager_open(&pBt->pPager, zFilename, EXTRA_SIZE, flags);
+  rc = sqlite3pager_open(&pBt->pPager, zFilename, EXTRA_SIZE, flags,
+                         exclusiveFlag, allowReadonly);
   if( rc!=SQLITE_OK ){
     if( pBt->pPager ) sqlite3pager_close(pBt->pPager);
     sqliteFree(pBt);
@@ -5831,3 +5833,8 @@
   return sqlite3pager_reset(pBt->pPager);
 }
 #endif
+
+/* js */
+int sqlite3_is_readonly(sqlite3* db) {
+  return db->aDb->pBt->readOnly;
+}
diff -u ../../sqlite-3.2.8.orig/btree.h ./btree.h
--- ../../sqlite-3.2.8.orig/btree.h	2005-12-19 10:37:50.000000000 +0100
+++ ./btree.h	2008-01-14 14:40:13.828125000 +0100
@@ -13,7 +13,6 @@
 ** subsystem.  See comments in the source code for a detailed description
 ** of what each interface routine does.
 **
-** @(#) $Id: btree.h,v 1.64 2005/08/27 16:36:49 drh Exp $
 */
 #ifndef _BTREE_H_
 #define _BTREE_H_
@@ -41,7 +40,9 @@
 int sqlite3BtreeOpen(
   const char *zFilename,   /* Name of database file to open */
   Btree **,                /* Return open Btree* here */
-  int flags                /* Flags */
+  int flags,               /* Flags */
+  int exclusiveFlag,       /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly        /* as in sqlite3OsOpenReadWrite() */
 );
 
 /* The flags parameter to sqlite3BtreeOpen can be the bitwise or of the
diff -u ../../sqlite-3.2.8.orig/build.c ./build.c
--- ../../sqlite-3.2.8.orig/build.c	2005-12-19 10:37:50.000000000 +0100
+++ ./build.c	2008-01-14 14:40:23.062500000 +0100
@@ -22,7 +22,6 @@
 **     COMMIT
 **     ROLLBACK
 **
-** $Id: build.c,v 1.351 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 #include <ctype.h>
@@ -2721,7 +2720,7 @@
 static int sqlite3OpenTempDatabase(Parse *pParse){
   sqlite3 *db = pParse->db;
   if( db->aDb[1].pBt==0 && !pParse->explain ){
-    int rc = sqlite3BtreeFactory(db, 0, 0, MAX_PAGES, &db->aDb[1].pBt);
+    int rc = sqlite3BtreeFactory(db, 0, 0, MAX_PAGES, &db->aDb[1].pBt, 0 /*!exclusive*/, 1/*allowReadonly*/);
     if( rc!=SQLITE_OK ){
       sqlite3ErrorMsg(pParse, "unable to open a temporary database "
         "file for storing temporary tables");
diff -u ../../sqlite-3.2.8.orig/callback.c ./callback.c
--- ../../sqlite-3.2.8.orig/callback.c	2005-12-19 10:37:50.000000000 +0100
+++ ./callback.c	2008-01-14 14:40:25.328125000 +0100
@@ -13,7 +13,6 @@
 ** This file contains functions used to access the internal hash tables
 ** of user defined functions and collation sequences.
 **
-** $Id: callback.c,v 1.3 2005/08/14 01:20:38 drh Exp $
 */
 
 #include "sqliteInt.h"
diff -u ../../sqlite-3.2.8.orig/complete.c ./complete.c
--- ../../sqlite-3.2.8.orig/complete.c	2005-12-19 10:37:50.000000000 +0100
+++ ./complete.c	2008-01-14 14:40:27.343750000 +0100
@@ -16,7 +16,6 @@
 ** separating it out, the code will be automatically omitted from
 ** static links that do not use it.
 **
-** $Id: complete.c,v 1.1 2005/08/14 17:53:21 drh Exp $
 */
 #include "sqliteInt.h"
 #ifndef SQLITE_OMIT_COMPLETE
diff -u ../../sqlite-3.2.8.orig/date.c ./date.c
--- ../../sqlite-3.2.8.orig/date.c	2005-12-19 10:37:50.000000000 +0100
+++ ./date.c	2008-01-14 14:40:30.390625000 +0100
@@ -16,7 +16,6 @@
 ** sqlite3RegisterDateTimeFunctions() found at the bottom of the file.
 ** All other code has file scope.
 **
-** $Id: date.c,v 1.45 2005/06/25 18:42:14 drh Exp $
 **
 ** NOTES:
 **
diff -u ../../sqlite-3.2.8.orig/delete.c ./delete.c
--- ../../sqlite-3.2.8.orig/delete.c	2005-12-19 10:37:50.000000000 +0100
+++ ./delete.c	2008-01-14 14:40:32.968750000 +0100
@@ -12,7 +12,6 @@
 ** This file contains C code routines that are called by the parser
 ** in order to generate code for DELETE FROM statements.
 **
-** $Id: delete.c,v 1.111 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 
diff -u ../../sqlite-3.2.8.orig/expr.c ./expr.c
--- ../../sqlite-3.2.8.orig/expr.c	2005-12-19 10:37:50.000000000 +0100
+++ ./expr.c	2008-01-14 14:40:33.734375000 +0100
@@ -12,7 +12,6 @@
 ** This file contains routines used for analyzing expressions and
 ** for generating VDBE code that evaluates expressions in SQLite.
 **
-** $Id: expr.c,v 1.230 2005/09/23 21:11:54 drh Exp $
 */
 #include "sqliteInt.h"
 #include <ctype.h>
diff -u ../../sqlite-3.2.8.orig/func.c ./func.c
--- ../../sqlite-3.2.8.orig/func.c	2005-12-19 10:37:50.000000000 +0100
+++ ./func.c	2008-01-14 14:40:33.984375000 +0100
@@ -16,7 +16,6 @@
 ** sqliteRegisterBuildinFunctions() found at the bottom of the file.
 ** All other code has file scope.
 **
-** $Id: func.c,v 1.110 2005/09/08 20:37:43 drh Exp $
 */
 #include "sqliteInt.h"
 #include <ctype.h>
diff -u ../../sqlite-3.2.8.orig/hash.c ./hash.c
--- ../../sqlite-3.2.8.orig/hash.c	2005-12-19 10:37:50.000000000 +0100
+++ ./hash.c	2008-01-14 14:40:34.140625000 +0100
@@ -12,7 +12,6 @@
 ** This is the implementation of generic hash-tables
 ** used in SQLite.
 **
-** $Id: hash.c,v 1.16 2005/01/31 12:56:44 danielk1977 Exp $
 */
 #include "sqliteInt.h"
 #include <assert.h>
diff -u ../../sqlite-3.2.8.orig/hash.h ./hash.h
--- ../../sqlite-3.2.8.orig/hash.h	2005-12-19 10:37:50.000000000 +0100
+++ ./hash.h	2008-01-14 14:40:14.421875000 +0100
@@ -12,7 +12,6 @@
 ** This is the header file for the generic hash-table implemenation
 ** used in SQLite.
 **
-** $Id: hash.h,v 1.8 2004/08/20 14:08:51 drh Exp $
 */
 #ifndef _SQLITE_HASH_H_
 #define _SQLITE_HASH_H_
diff -u ../../sqlite-3.2.8.orig/insert.c ./insert.c
--- ../../sqlite-3.2.8.orig/insert.c	2005-12-19 10:37:50.000000000 +0100
+++ ./insert.c	2008-01-14 14:40:34.265625000 +0100
@@ -12,7 +12,6 @@
 ** This file contains C code routines that are called by the parser
 ** to handle INSERT statements in SQLite.
 **
-** $Id: insert.c,v 1.143 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 
diff -u ../../sqlite-3.2.8.orig/legacy.c ./legacy.c
--- ../../sqlite-3.2.8.orig/legacy.c	2005-12-19 10:37:50.000000000 +0100
+++ ./legacy.c	2008-01-14 14:40:34.343750000 +0100
@@ -14,7 +14,6 @@
 ** other files are for internal use by SQLite and should not be
 ** accessed by users of the library.
 **
-** $Id: legacy.c,v 1.7 2004/09/06 17:34:13 drh Exp $
 */
 
 #include "sqliteInt.h"
diff -u ../../sqlite-3.2.8.orig/main.c ./main.c
--- ../../sqlite-3.2.8.orig/main.c	2005-12-19 10:37:50.000000000 +0100
+++ ./main.c	2008-01-14 14:40:34.515625000 +0100
@@ -14,12 +14,17 @@
 ** other files are for internal use by SQLite and should not be
 ** accessed by users of the library.
 **
-** $Id: main.c,v 1.302 2005/09/17 15:20:27 drh Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
 #include <ctype.h>
 
+/* (jstaniek) used by sqlite_set_verbose_vacuum and in vacuum.c */
+int g_verbose_vacuum = 0;
+void sqlite_set_verbose_vacuum(int set){
+  g_verbose_vacuum=set;
+}
+
 /*
 ** The following constant value is used by the SQLITE_BIGENDIAN and
 ** SQLITE_LITTLEENDIAN macros.
@@ -256,6 +261,11 @@
     case SQLITE_FORMAT:     z = "auxiliary database format error";       break;
     case SQLITE_RANGE:      z = "bind or column index out of range";     break;
     case SQLITE_NOTADB:     z = "file is encrypted or is not a database";break;
+ /* js */
+    case SQLITE_CANTOPEN_WITH_LOCKED_READWRITE:
+                            z = "unable to open with locked read/write access"; break;
+    case SQLITE_CANTOPEN_WITH_LOCKED_WRITE:
+                            z = "unable to open with locked write access"; break;
     default:                z = "unknown error";                         break;
   }
   return z;
@@ -592,7 +602,9 @@
   const char *zFilename,    /* Name of the file containing the BTree database */
   int omitJournal,          /* if TRUE then do not journal this file */
   int nCache,               /* How many pages in the page cache */
-  Btree **ppBtree           /* Pointer to new Btree object written here */
+  Btree **ppBtree,          /* Pointer to new Btree object written here */
+  int exclusiveFlag,        /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly         /* as in sqlite3OsOpenReadWrite() */
 ){
   int btree_flags = 0;
   int rc;
@@ -621,7 +633,7 @@
 #endif /* SQLITE_OMIT_MEMORYDB */
   }
 
-  rc = sqlite3BtreeOpen(zFilename, ppBtree, btree_flags);
+  rc = sqlite3BtreeOpen(zFilename, ppBtree, btree_flags, exclusiveFlag, allowReadonly);
   if( rc==SQLITE_OK ){
     sqlite3BtreeSetBusyHandler(*ppBtree, (void*)&db->busyHandler);
     sqlite3BtreeSetCacheSize(*ppBtree, nCache);
@@ -710,7 +722,9 @@
 */
 static int openDatabase(
   const char *zFilename, /* Database filename UTF-8 encoded */
-  sqlite3 **ppDb         /* OUT: Returned database handle */
+  sqlite3 **ppDb,        /* OUT: Returned database handle */
+  int exclusiveFlag,     /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly      /* as in sqlite3OsOpenReadWrite() */
 ){
   sqlite3 *db;
   int rc, i;
@@ -759,7 +773,7 @@
   }
 
   /* Open the backend database driver */
-  rc = sqlite3BtreeFactory(db, zFilename, 0, MAX_PAGES, &db->aDb[0].pBt);
+  rc = sqlite3BtreeFactory(db, zFilename, 0, MAX_PAGES, &db->aDb[0].pBt, exclusiveFlag, allowReadonly);
   if( rc!=SQLITE_OK ){
     sqlite3Error(db, rc, 0);
     db->magic = SQLITE_MAGIC_CLOSED;
@@ -806,9 +820,11 @@
 */
 int sqlite3_open(
   const char *zFilename, 
-  sqlite3 **ppDb 
+  sqlite3 **ppDb,
+  int exclusiveFlag,     /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly      /* as in sqlite3OsOpenReadWrite() */
 ){
-  return openDatabase(zFilename, ppDb);
+  return openDatabase(zFilename, ppDb, exclusiveFlag, allowReadonly);
 }
 
 #ifndef SQLITE_OMIT_UTF16
@@ -817,7 +833,9 @@
 */
 int sqlite3_open16(
   const void *zFilename, 
-  sqlite3 **ppDb
+  sqlite3 **ppDb,
+  int exclusiveFlag,     /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly      /* as in sqlite3OsOpenReadWrite() */
 ){
   char const *zFilename8;   /* zFilename encoded in UTF-8 instead of UTF-16 */
   int rc = SQLITE_NOMEM;
@@ -829,7 +847,7 @@
   sqlite3ValueSetStr(pVal, -1, zFilename, SQLITE_UTF16NATIVE, SQLITE_STATIC);
   zFilename8 = sqlite3ValueText(pVal, SQLITE_UTF8);
   if( zFilename8 ){
-    rc = openDatabase(zFilename8, ppDb);
+    rc = openDatabase(zFilename8, ppDb, exclusiveFlag, allowReadonly);
     if( rc==SQLITE_OK && *ppDb ){
       sqlite3_exec(*ppDb, "PRAGMA encoding = 'UTF-16'", 0, 0, 0);
     }
diff -u ../../sqlite-3.2.8.orig/os.h ./os.h
--- ../../sqlite-3.2.8.orig/os.h	2005-12-19 10:37:50.000000000 +0100
+++ ./os.h	2008-01-14 14:40:15.140625000 +0100
@@ -175,7 +175,8 @@
 
 int sqlite3OsDelete(const char*);
 int sqlite3OsFileExists(const char*);
-int sqlite3OsOpenReadWrite(const char*, OsFile*, int*);
+/* js: extended */
+int sqlite3OsOpenReadWrite(const char*, OsFile*, int*, int, int);
 int sqlite3OsOpenExclusive(const char*, OsFile*, int);
 int sqlite3OsOpenReadOnly(const char*, OsFile*);
 int sqlite3OsOpenDirectory(const char*, OsFile*);
diff -u ../../sqlite-3.2.8.orig/os_unix.c ./os_unix.c
--- ../../sqlite-3.2.8.orig/os_unix.c	2005-12-19 10:37:50.000000000 +0100
+++ ./os_unix.c	2008-01-14 14:40:35.171875000 +0100
@@ -509,7 +509,9 @@
 int sqlite3OsOpenReadWrite(
   const char *zFilename,
   OsFile *id,
-  int *pReadonly
+  int *pReadonly,
+  int exclusiveFlag,
+  int allowReadonly
 ){
   int rc;
   assert( !id->isOpen );
diff -u ../../sqlite-3.2.8.orig/os_win.c ./os_win.c
--- ../../sqlite-3.2.8.orig/os_win.c	2005-12-19 10:37:50.000000000 +0100
+++ ./os_win.c	2008-01-14 14:40:35.312500000 +0100
@@ -155,26 +155,37 @@
 
 /*
 ** Attempt to open a file for both reading and writing.  If that
-** fails, try opening it read-only.  If the file does not exist,
-** try to create it.
+** fails, and allowReadonly is 1, try opening it read-only.  
+** If the file does not exist, try to create it.
+**
+** Exclusive write access is required if exclusiveFlag is 1. 
+** Exclusive read/write access is required if exclusiveFlag is 2. 
+** In this case, if allowReadonly is also 1, only shared writing is locked.
 **
 ** On success, a handle for the open file is written to *id
 ** and *pReadonly is set to 0 if the file was opened for reading and
 ** writing or 1 if the file was opened read-only.  The function returns
 ** SQLITE_OK.
 **
-** On failure, the function returns SQLITE_CANTOPEN and leaves
-** *id and *pReadonly unchanged.
+** On failure the function leaves *id and *pReadonly unchanged, and returns:
+** - SQLITE_CANTOPEN_WITH_LOCKED_READWRITE if it was unable to lock the file 
+**   for read/write access.
+** - SQLITE_CANTOPEN_WITH_LOCKED_WRITE if it was unable to lock the file 
+**   for write access.
+** - SQLITE_CANTOPEN in any other case.
 */
 int sqlite3OsOpenReadWrite(
   const char *zFilename,
   OsFile *id,
-  int *pReadonly
+  int *pReadonly,
+  int exclusiveFlag,
+  int allowReadonly
 ){
   HANDLE h;
+  int access;
   WCHAR *zWide = utf8ToUnicode(zFilename);
   assert( !id->isOpen );
-  if( zWide ){
+/*  if( zWide ){
     h = CreateFileW(zWide,
        GENERIC_READ | GENERIC_WRITE,
        FILE_SHARE_READ | FILE_SHARE_WRITE,
@@ -201,31 +212,84 @@
       *pReadonly = 0;
     }
     sqliteFree(zWide);
-  }else{
-    h = CreateFileA(zFilename,
-       GENERIC_READ | GENERIC_WRITE,
-       FILE_SHARE_READ | FILE_SHARE_WRITE,
-       NULL,
-       OPEN_ALWAYS,
-       FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
-       NULL
-    );
-    if( h==INVALID_HANDLE_VALUE ){
-      h = CreateFileA(zFilename,
-         GENERIC_READ,
-         FILE_SHARE_READ,
-         NULL,
-         OPEN_ALWAYS,
-         FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
-         NULL
-      );
-      if( h==INVALID_HANDLE_VALUE ){
+  }else*/{
+    /* js */
+    if (exclusiveFlag!=SQLITE_OPEN_READONLY) {
+      if (exclusiveFlag==SQLITE_OPEN_NO_LOCKED)
+         access = FILE_SHARE_READ | FILE_SHARE_WRITE;
+      else if (exclusiveFlag==SQLITE_OPEN_WRITE_LOCKED)
+         access = FILE_SHARE_READ;
+      else /* SQLITE_OPEN_READ_WRITE_LOCKED */
+         access = 0;
+      if( zWide ){
+        h = CreateFileW(zWide,
+          GENERIC_READ | GENERIC_WRITE,
+          access,
+          NULL,
+          OPEN_ALWAYS,
+          FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
+          NULL
+        );
+      }
+      else {
+        h = CreateFileA(zFilename,
+          GENERIC_READ | GENERIC_WRITE,
+          access,
+          NULL,
+          OPEN_ALWAYS,
+          FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
+          NULL
+        );
+      }
+      if (!allowReadonly && GetLastError()==ERROR_SHARING_VIOLATION) {
+        sqliteFree(zWide);
+        if (exclusiveFlag==SQLITE_OPEN_NO_LOCKED)
+          return SQLITE_CANTOPEN;
+        return exclusiveFlag==SQLITE_OPEN_READ_WRITE_LOCKED 
+               ? SQLITE_CANTOPEN_WITH_LOCKED_READWRITE
+               : SQLITE_CANTOPEN_WITH_LOCKED_WRITE;
+      }
+    }
+    if( exclusiveFlag==SQLITE_OPEN_READONLY || (allowReadonly && h==INVALID_HANDLE_VALUE) ){
+     /* open read only */
+     /*	  if (exclusiveFlag==0) */
+      access = FILE_SHARE_READ | FILE_SHARE_WRITE;
+   /*		else
+   			 access = FILE_SHARE_READ;*/
+      if( zWide ){
+        h = CreateFileW(zWide,
+          GENERIC_READ,
+          access,
+          NULL,
+          OPEN_ALWAYS,
+          FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
+          NULL
+        );
+      }
+      else {
+        h = CreateFileA(zFilename,
+          GENERIC_READ,
+          access,
+          NULL,
+          OPEN_ALWAYS,
+          FILE_ATTRIBUTE_NORMAL | FILE_FLAG_RANDOM_ACCESS,
+          NULL
+        );
+      }
+      if (GetLastError()==ERROR_SHARING_VIOLATION) {
+        sqliteFree(zWide);
         return SQLITE_CANTOPEN;
       }
-      *pReadonly = 1;
+      if( h!=INVALID_HANDLE_VALUE ){
+        *pReadonly = 1;
+      }
     }else{
       *pReadonly = 0;
     }
+    sqliteFree(zWide);
+    if( h==INVALID_HANDLE_VALUE ){
+      return SQLITE_CANTOPEN;
+    }
   }
   id->h = h;
   id->locktype = NO_LOCK;
diff -u ../../sqlite-3.2.8.orig/pager.c ./pager.c
--- ../../sqlite-3.2.8.orig/pager.c	2005-12-19 10:37:50.000000000 +0100
+++ ./pager.c	2008-01-14 14:40:35.562500000 +0100
@@ -18,7 +18,6 @@
 ** file simultaneously, or one process from reading the database while
 ** another is writing.
 **
-** @(#) $Id: pager.c,v 1.215.2.1 2005/12/19 16:29:07 drh Exp $
 */
 #ifndef SQLITE_OMIT_DISKIO
 #include "sqliteInt.h"
@@ -1590,7 +1589,9 @@
   Pager **ppPager,         /* Return the Pager structure here */
   const char *zFilename,   /* Name of the database file to open */
   int nExtra,              /* Extra bytes append to each in-memory page */
-  int flags                /* flags controlling this file */
+  int flags,               /* flags controlling this file */
+  int exclusiveFlag,       /* as in sqlite3OsOpenReadWrite() */
+  int allowReadonly        /* as in sqlite3OsOpenReadWrite() */
 ){
   Pager *pPager;
   char *zFullPathname = 0;
@@ -1621,7 +1622,7 @@
     {
       zFullPathname = sqlite3OsFullPathname(zFilename);
       if( zFullPathname ){
-        rc = sqlite3OsOpenReadWrite(zFullPathname, &fd, &readOnly);
+        rc = sqlite3OsOpenReadWrite(zFullPathname, &fd, &readOnly, exclusiveFlag, allowReadonly);
       }
     }
   }else{
diff -u ../../sqlite-3.2.8.orig/pager.h ./pager.h
--- ../../sqlite-3.2.8.orig/pager.h	2005-12-19 10:37:50.000000000 +0100
+++ ./pager.h	2008-01-14 14:40:15.750000000 +0100
@@ -13,7 +13,6 @@
 ** subsystem.  The page cache subsystem reads and writes a file a page
 ** at a time and provides a journal for rollback.
 **
-** @(#) $Id: pager.h,v 1.46 2005/09/19 19:05:21 drh Exp $
 */
 
 /*
@@ -67,7 +66,7 @@
 ** routines:
 */
 int sqlite3pager_open(Pager **ppPager, const char *zFilename,
-                     int nExtra, int flags);
+                     int nExtra, int flags, int exclusiveFlag, int allowReadonly);
 void sqlite3pager_set_busyhandler(Pager*, BusyHandler *pBusyHandler);
 void sqlite3pager_set_destructor(Pager*, void(*)(void*,int));
 void sqlite3pager_set_reiniter(Pager*, void(*)(void*,int));
diff -u ../../sqlite-3.2.8.orig/pragma.c ./pragma.c
--- ../../sqlite-3.2.8.orig/pragma.c	2005-12-19 10:37:50.000000000 +0100
+++ ./pragma.c	2008-01-14 14:40:35.937500000 +0100
@@ -11,7 +11,6 @@
 *************************************************************************
 ** This file contains code used to implement the PRAGMA command.
 **
-** $Id: pragma.c,v 1.100 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
diff -u ../../sqlite-3.2.8.orig/prepare.c ./prepare.c
--- ../../sqlite-3.2.8.orig/prepare.c	2005-12-19 10:37:50.000000000 +0100
+++ ./prepare.c	2008-01-14 14:40:36.125000000 +0100
@@ -13,7 +13,6 @@
 ** interface, and routines that contribute to loading the database schema
 ** from disk.
 **
-** $Id: prepare.c,v 1.4 2005/09/10 16:46:13 drh Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
diff -u ../../sqlite-3.2.8.orig/random.c ./random.c
--- ../../sqlite-3.2.8.orig/random.c	2005-12-19 10:37:50.000000000 +0100
+++ ./random.c	2008-01-14 14:40:36.375000000 +0100
@@ -15,7 +15,6 @@
 ** Random numbers are used by some of the database backends in order
 ** to generate random integer keys for tables or random filenames.
 **
-** $Id: random.c,v 1.13 2005/06/12 21:35:52 drh Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
diff -u ../../sqlite-3.2.8.orig/select.c ./select.c
--- ../../sqlite-3.2.8.orig/select.c	2005-12-19 10:37:50.000000000 +0100
+++ ./select.c	2008-01-14 14:40:36.593750000 +0100
@@ -12,7 +12,6 @@
 ** This file contains C code routines that are called by the parser
 ** to handle SELECT statements in SQLite.
 **
-** $Id: select.c,v 1.276 2005/09/20 18:13:24 drh Exp $
 */
 #include "sqliteInt.h"
 
diff -u ../../sqlite-3.2.8.orig/shell.c ./shell.c
--- ../../sqlite-3.2.8.orig/shell.c	2006-06-05 11:12:30.875000000 +0200
+++ ./shell.c	2008-01-14 14:40:36.781250000 +0100
@@ -12,7 +12,6 @@
 ** This file contains code to implement the "sqlite" command line
 ** utility for accessing SQLite databases.
 **
-** $Id: shell.c,v 1.128 2005/09/11 02:03:04 drh Exp $
 */
 #include <stdlib.h>
 #include <string.h>
@@ -20,7 +19,7 @@
 #include <assert.h>
 #include "sqlite3.h"
 #include <ctype.h>
-
+#include <kexi/config-kexi.h>
 #if !defined(_WIN32) && !defined(WIN32) && !defined(__MACOS__)
 # include <signal.h>
 # include <pwd.h>
@@ -28,6 +27,10 @@
 # include <sys/types.h>
 #endif
 
+#ifdef _WIN32
+# include <io.h>
+#endif
+
 #ifdef __MACOS__
 # include <console.h>
 # include <signal.h>
@@ -77,7 +80,6 @@
 static char mainPrompt[20];     /* First line prompt. default: "sqlite> "*/
 static char continuePrompt[20]; /* Continuation prompt. default: "   ...> " */
 
-
 /*
 ** Determines if a string is a number of not.
 */
@@ -358,7 +360,7 @@
     output_c_string(p->out, z);
   }
   if( bSep ){
-    fprintf(p->out, p->separator);
+    fprintf(p->out, "%s", p->separator);
   }
 }
 
@@ -793,7 +795,7 @@
 */
 static void open_db(struct callback_data *p){
   if( p->db==0 ){
-    sqlite3_open(p->zDbFilename, &p->db);
+    sqlite3_open(p->zDbFilename, &p->db, 0/*!exclusive*/, 1/*allowReadonly*/);
     db = p->db;
 #ifdef SQLITE_HAS_CODEC
     sqlite3_key(p->db, p->zKey, p->zKey ? strlen(p->zKey) : 0);
@@ -1626,6 +1628,9 @@
   "   -list                set output mode to 'list'\n"
   "   -separator 'x'       set output field separator (|)\n"
   "   -nullvalue 'text'    set text string for NULL values\n"
+  "   -verbose-vacuum      set VACUUM to verbose, interactive mode\n"
+  "                         so it is possible to get progress info\n"
+  "                         and abort the process\n"
   "   -version             show SQLite version\n"
   "   -help                show this text, also show dot-commands\n"
 ;
@@ -1753,6 +1758,8 @@
       data.showHeader = 0;
     }else if( strcmp(z,"-echo")==0 ){
       data.echoOn = 1;
+    }else if( strcmp(z,"-verbose-vacuum")==0 ){ /*(jstaniek)*/
+      sqlite_set_verbose_vacuum(1);
     }else if( strcmp(z,"-version")==0 ){
       printf("%s\n", sqlite3_libversion());
       return 1;
@@ -1787,7 +1794,7 @@
       char *zHome;
       char *zHistory = 0;
       printf(
-        "SQLite version %s\n"
+        "SQLite version %s (customized, bundled with Kexi)\n"
         "Enter \".help\" for instructions\n",
         sqlite3_libversion()
       );
diff -u ../../sqlite-3.2.8.orig/sqlite3.h ./sqlite3.h
--- ../../sqlite-3.2.8.orig/sqlite3.h	2005-12-19 10:37:50.000000000 +0100
+++ ./sqlite3.h	2008-01-14 14:40:16.046875000 +0100
@@ -12,7 +12,6 @@
 ** This header file defines the interface that the SQLite library
 ** presents to client programs.
 **
-** @(#) $Id: sqlite.h.in,v 1.141 2005/09/08 10:58:52 drh Exp $
 */
 #ifndef _SQLITE3_H_
 #define _SQLITE3_H_
@@ -186,6 +185,10 @@
 #define SQLITE_ROW         100  /* sqlite3_step() has another row ready */
 #define SQLITE_DONE        101  /* sqlite3_step() has finished executing */
 
+/* js: Used in sqlite3OsOpenReadWrite() */
+#define SQLITE_CANTOPEN_WITH_LOCKED_READWRITE 0x1001 /* Cannot open with locked read/write access */
+#define SQLITE_CANTOPEN_WITH_LOCKED_WRITE     0x1002 /* Cannot open with locked write access */
+
 /*
 ** Each entry in an SQLite table has a unique integer key.  (The key is
 ** the value of the INTEGER PRIMARY KEY column if there is such a column,
@@ -538,13 +541,30 @@
 ** with the sqlite3* handle should be released by passing it to
 ** sqlite3_close() when it is no longer required.
 */
+#define SQLITE_OPEN_READONLY 3
+#define SQLITE_OPEN_READ_WRITE_LOCKED 2
+#define SQLITE_OPEN_WRITE_LOCKED 1
+#define SQLITE_OPEN_NO_LOCKED 0
 int sqlite3_open(
   const char *filename,   /* Database filename (UTF-8) */
-  sqlite3 **ppDb          /* OUT: SQLite db handle */
+  sqlite3 **ppDb,         /* OUT: SQLite db handle */
+  int exclusiveFlag,      /* If SQLITE_OPEN_READONLY, readonly mode is used, */
+                          /* If SQLITE_OPEN_READ_WRITE_LOCKED, exclusive read/write access is required, */
+                          /* If SQLITE_OPEN_WRITE_LOCKED, exclusive write access is required, 
+                             If SQLITE_OPEN_NO_LOCKED, no locking is performed. */
+  int allowReadonly       /* If 1 and read/write opening fails, 
+                             try opening in read-only mode */
 );
+
 int sqlite3_open16(
   const void *filename,   /* Database filename (UTF-16) */
-  sqlite3 **ppDb          /* OUT: SQLite db handle */
+  sqlite3 **ppDb,         /* OUT: SQLite db handle */
+  int exclusiveFlag,      /* If SQLITE_OPEN_READONLY, readonly mode is used, */
+                          /* If SQLITE_OPEN_READ_WRITE_LOCKED, exclusive read/write access is required, */
+                          /* If SQLITE_OPEN_WRITE_LOCKED, exclusive write access is required, 
+                             If SQLITE_OPEN_NO_LOCKED, no locking is performed. */
+  int allowReadonly       /* If 1 and read/write opening fails, 
+                             try opening in read-only mode */
 );
 
 /*
@@ -1269,6 +1289,12 @@
 */
 sqlite3 *sqlite3_db_handle(sqlite3_stmt*);
 
+/* (jstaniek) used in vacuum.c, set==1 sets VACUUM to verbose, 
+** interactive mode, so it is possible to get progress info and abort 
+** the process. Usable for GUI apps.
+*/
+void sqlite_set_verbose_vacuum(int set);
+
 #ifdef __cplusplus
 }  /* End of the 'extern "C"' block */
 #endif
diff -u ../../sqlite-3.2.8.orig/sqliteInt.h ./sqliteInt.h
--- ../../sqlite-3.2.8.orig/sqliteInt.h	2005-12-19 10:37:50.000000000 +0100
+++ ./sqliteInt.h	2008-01-14 14:40:16.218750000 +0100
@@ -11,7 +11,6 @@
 *************************************************************************
 ** Internal interface definitions for SQLite.
 **
-** @(#) $Id: sqliteInt.h,v 1.421 2005/09/19 21:05:49 drh Exp $
 */
 #ifndef _SQLITEINT_H_
 #define _SQLITEINT_H_
@@ -50,6 +49,7 @@
 # define _LARGEFILE_SOURCE 1
 #endif
 
+#include "sqliteconfig.h"
 #include "sqlite3.h"
 #include "hash.h"
 #include "parse.h"
@@ -1586,7 +1586,8 @@
 void sqlite3Attach(Parse*, Token*, Token*, int, Token*);
 void sqlite3Detach(Parse*, Token*);
 int sqlite3BtreeFactory(const sqlite3 *db, const char *zFilename,
-                       int omitJournal, int nCache, Btree **ppBtree);
+                       int omitJournal, int nCache, Btree **ppBtree,
+                       int exclusiveFlag, int allowReadonly);
 int sqlite3FixInit(DbFixer*, Parse*, int, const char*, const Token*);
 int sqlite3FixSrcList(DbFixer*, SrcList*);
 int sqlite3FixSelect(DbFixer*, Select*);
diff -u ../../sqlite-3.2.8.orig/tclsqlite.c ./tclsqlite.c
--- ../../sqlite-3.2.8.orig/tclsqlite.c	2005-12-19 10:37:50.000000000 +0100
+++ ./tclsqlite.c	2008-01-14 14:40:37.156250000 +0100
@@ -11,7 +11,6 @@
 *************************************************************************
 ** A TCL Interface to SQLite
 **
-** $Id: tclsqlite.c,v 1.132 2005/08/29 23:00:04 drh Exp $
 */
 #ifndef NO_TCL     /* Omit this whole file if TCL is unavailable */
 
diff -u ../../sqlite-3.2.8.orig/tokenize.c ./tokenize.c
--- ../../sqlite-3.2.8.orig/tokenize.c	2005-12-19 10:37:50.000000000 +0100
+++ ./tokenize.c	2008-01-14 14:40:37.328125000 +0100
@@ -15,7 +15,6 @@
 ** individual tokens and sends those tokens one-by-one over to the
 ** parser for analysis.
 **
-** $Id: tokenize.c,v 1.107 2005/08/23 11:31:26 drh Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
diff -u ../../sqlite-3.2.8.orig/update.c ./update.c
--- ../../sqlite-3.2.8.orig/update.c	2005-12-19 10:37:50.000000000 +0100
+++ ./update.c	2008-01-14 14:40:37.671875000 +0100
@@ -12,7 +12,6 @@
 ** This file contains C code routines that are called by the parser
 ** to handle UPDATE statements.
 **
-** $Id: update.c,v 1.112 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 
diff -u ../../sqlite-3.2.8.orig/utf.c ./utf.c
--- ../../sqlite-3.2.8.orig/utf.c	2005-12-19 10:37:50.000000000 +0100
+++ ./utf.c	2008-01-14 14:40:37.812500000 +0100
@@ -12,7 +12,6 @@
 ** This file contains routines used to translate between UTF-8, 
 ** UTF-16, UTF-16BE, and UTF-16LE.
 **
-** $Id: utf.c,v 1.32 2005/01/28 01:29:08 drh Exp $
 **
 ** Notes on UTF-8:
 **
diff -u ../../sqlite-3.2.8.orig/util.c ./util.c
--- ../../sqlite-3.2.8.orig/util.c	2005-12-19 10:37:50.000000000 +0100
+++ ./util.c	2008-01-14 14:40:37.968750000 +0100
@@ -14,7 +14,6 @@
 ** This file contains functions for allocating memory, comparing
 ** strings, and stuff like that.
 **
-** $Id: util.c,v 1.146 2005/09/17 18:34:11 drh Exp $
 */
 #include "sqliteInt.h"
 #include <stdarg.h>
diff -u ../../sqlite-3.2.8.orig/vacuum.c ./vacuum.c
--- ../../sqlite-3.2.8.orig/vacuum.c	2005-12-19 10:37:50.000000000 +0100
+++ ./vacuum.c	2008-01-14 14:40:38.156250000 +0100
@@ -14,7 +14,6 @@
 ** Most of the code in this file may be omitted by defining the
 ** SQLITE_OMIT_VACUUM macro.
 **
-** $Id: vacuum.c,v 1.45 2005/06/07 09:21:07 danielk1977 Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
@@ -46,18 +45,37 @@
   return sqlite3_finalize(pStmt);
 }
 
+/* (jstaniek) */
+extern int g_verbose_vacuum;
+
 /*
 ** Execute zSql on database db. The statement returns exactly
 ** one column. Execute this as SQL on the same database.
+**
+** (js: extension): if count > 0, "VACUUM: X%" string will 
+**                  be printed to stdout, so user (a human or calling application) 
+**                  can know the overall progress of the operation.
+**                  and the program will wait for a key press (followed by RETURN);
+**                  'q' key aborts the execution and any other key allows to proceed.
 */
-static int execExecSql(sqlite3 *db, const char *zSql){
+static int execExecSql(sqlite3 *db, const char *zSql, int count){
   sqlite3_stmt *pStmt;
-  int rc;
+  int rc, i;
+  char ch;
 
   rc = sqlite3_prepare(db, zSql, -1, &pStmt, 0);
   if( rc!=SQLITE_OK ) return rc;
 
-  while( SQLITE_ROW==sqlite3_step(pStmt) ){
+  for( i=0; SQLITE_ROW==sqlite3_step(pStmt); i++ ){
+    if (g_verbose_vacuum!=0 && count>0) {
+      fprintf(stdout, "VACUUM: %d%%\n", 100*(i+1)/count);
+      fflush(stdout);
+      fscanf(stdin, "%c", &ch);
+      if ('q'==ch) { /* quit */
+        sqlite3_finalize(pStmt);
+        return SQLITE_ABORT;
+      }
+    }
     rc = execSql(db, sqlite3_column_text(pStmt, 0));
     if( rc!=SQLITE_OK ){
       sqlite3_finalize(pStmt);
@@ -93,6 +111,8 @@
 */
 int sqlite3RunVacuum(char **pzErrMsg, sqlite3 *db){
   int rc = SQLITE_OK;     /* Return code from service routines */
+  sqlite3_stmt *pStmt = 0;
+  int tables_count = 0;
 #ifndef SQLITE_OMIT_VACUUM
   const char *zFilename;  /* full pathname of the database file */
   int nFilename;          /* number of characters  in zFilename[] */
@@ -184,22 +204,29 @@
   */
   rc = execExecSql(db, 
       "SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14,100000000) "
-      "  FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'");
+      "  FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'", 0);
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
   rc = execExecSql(db, 
       "SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14,100000000)"
-      "  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' ");
+      "  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' ", 0);
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
   rc = execExecSql(db, 
       "SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21,100000000) "
-      "  FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'");
+      "  FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'", 0);
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
   rc = execExecSql(db, 
       "SELECT 'CREATE VIEW vacuum_db.' || substr(sql,13,100000000) "
-      "  FROM sqlite_master WHERE type='view'"
+      "  FROM sqlite_master WHERE type='view'", 0
   );
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
 
+  /* (js) get # of tables so we can output progress.
+  */
+  rc = sqlite3_prepare(db, "SELECT count(name) FROM sqlite_master "
+      "WHERE type = 'table';", -1, &pStmt, 0);
+  if( rc!=SQLITE_OK || SQLITE_ROW!=sqlite3_step(pStmt)) goto end_of_vacuum;
+  tables_count = atoi( sqlite3_column_text(pStmt, 0) );
+
   /* Loop through the tables in the main database. For each, do
   ** an "INSERT INTO vacuum_db.xxx SELECT * FROM xxx;" to copy
   ** the contents to the temporary database.
@@ -208,7 +235,7 @@
       "SELECT 'INSERT INTO vacuum_db.' || quote(name) "
       "|| ' SELECT * FROM ' || quote(name) || ';'"
       "FROM sqlite_master "
-      "WHERE type = 'table' AND name!='sqlite_sequence';"
+      "WHERE type = 'table' AND name!='sqlite_sequence';", tables_count
   );
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
 
@@ -216,13 +243,13 @@
   */
   rc = execExecSql(db, 
       "SELECT 'DELETE FROM vacuum_db.' || quote(name) || ';' "
-      "FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' "
+      "FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' ", 0
   );
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
   rc = execExecSql(db, 
       "SELECT 'INSERT INTO vacuum_db.' || quote(name) "
       "|| ' SELECT * FROM ' || quote(name) || ';' "
-      "FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';"
+      "FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';", 0
   );
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
 
@@ -234,11 +261,10 @@
   */
   rc = execExecSql(db, 
       "SELECT 'CREATE TRIGGER  vacuum_db.' || substr(sql, 16, 1000000) "
-      "FROM sqlite_master WHERE type='trigger'"
+      "FROM sqlite_master WHERE type='trigger'", 0
   );
   if( rc!=SQLITE_OK ) goto end_of_vacuum;
 
-
   /* At this point, unless the main db was completely empty, there is now a
   ** transaction open on the vacuum database, but not on the main database.
   ** Open a btree level transaction on the main database. This allows a
diff -u ../../sqlite-3.2.8.orig/vdbe.c ./vdbe.c
--- ../../sqlite-3.2.8.orig/vdbe.c	2005-12-19 10:37:50.000000000 +0100
+++ ./vdbe.c	2008-01-14 14:40:38.484375000 +0100
@@ -43,7 +43,6 @@
 ** in this file for details.  If in doubt, do not deviate from existing
 ** commenting and indentation practices when changing or adding code.
 **
-** $Id: vdbe.c,v 1.491 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 #include "os.h"
@@ -2593,7 +2592,7 @@
   pCx = allocateCursor(p, i);
   if( pCx==0 ) goto no_mem;
   pCx->nullRow = 1;
-  rc = sqlite3BtreeFactory(db, 0, 1, TEMP_PAGES, &pCx->pBt);
+  rc = sqlite3BtreeFactory(db, 0, 1, TEMP_PAGES, &pCx->pBt, 0 /*!exclusive*/, 1/*allowReadonly*/);
   if( rc==SQLITE_OK ){
     rc = sqlite3BtreeBeginTrans(pCx->pBt, 1);
   }
diff -u ../../sqlite-3.2.8.orig/vdbe.h ./vdbe.h
--- ../../sqlite-3.2.8.orig/vdbe.h	2005-12-19 10:37:50.000000000 +0100
+++ ./vdbe.h	2008-01-14 14:40:16.328125000 +0100
@@ -15,7 +15,6 @@
 ** or VDBE.  The VDBE implements an abstract machine that runs a
 ** simple program to access and modify the underlying database.
 **
-** $Id: vdbe.h,v 1.99 2005/09/20 17:42:23 drh Exp $
 */
 #ifndef _SQLITE_VDBE_H_
 #define _SQLITE_VDBE_H_
diff -u ../../sqlite-3.2.8.orig/where.c ./where.c
--- ../../sqlite-3.2.8.orig/where.c	2005-12-19 10:37:50.000000000 +0100
+++ ./where.c	2008-01-14 14:40:39.578125000 +0100
@@ -16,7 +16,6 @@
 ** so is applicable.  Because this module is responsible for selecting
 ** indices, you might also think of this module as the "query optimizer".
 **
-** $Id: where.c,v 1.179 2005/09/20 17:42:23 drh Exp $
 */
 #include "sqliteInt.h"
 
